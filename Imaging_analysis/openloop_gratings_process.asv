function [daq, ts] = openloop_gratings_process(daq, ts, savepath)
%% Plot the dff and pattern
    % Plot the dff and fwd
    figure;
    yyaxis left;
    plot(daq.t_supp, daq.vy_supp, '-b');
    ylabel('pattern');  % Label for the left y-axis
    
    
    % Plot the second time series on the right y-axis
    yyaxis right;
    plot(daq.t, ts{1}(1,:), '-r');  % Plot second time series in red
    ylabel('dff');  % Label for the right y-axis
    
    % Add title and x-axis label
    xlabel('Time');
    title('Pattern and DFF');
    
    % Optional: Add legend
    legend('Pattern', 'dff');
    save_plot_with_title_as_filename('Pattern', 'dff', savepath);
    %% variables
    % frequency
    freq = daq.t(end)/length(daq.t);
    % Define the number of timepoints to include before and after motion
    len_sec = 2; % length in seconds of time to buffer with
    pre_motion_points = round(len_sec/freq);
    post_motion_points = round(len_sec/freq);
    remove_if_shorter_than = round(1.5/freq);

   
    %value for total speed (moving or no)
    still_cutoff = 3;
    
    %% using velocity to determine moving clockwise or counter
    % for 3 Hz
    moving_cw =[];
    moving_cw(daq.vy >= -3.1 & daq.vy <= 0) = 1;  % Set to 1 if between 0.75 and 0.8
    % take care of 6hz case
    if max(daq.vyv)>2.5
         moving_cw(daq.vy >= -3.11 & daq.vyv >= 0) = 1;
    end
    diff_array = diff([0, moving_cw, 0]);
    run_starts = find(diff_array == 1);
    run_ends = find(diff_array == -1) - 1;
    
    for i = 1:length(run_starts)
        run_length = run_ends(i) - run_starts(i) + 1;
        if run_length < remove_if_shorter_than
            moving_cw(run_starts(i):run_ends(i)) = 0;
        end
    end
    % ccw
    moving_ccw =[];
    moving_ccw(daq.vy >= 0 & daq.vy <= 4) = 1;  % Set to 1 if between 0.75 and 0.8
    if max(daq.vyv)>2.5
         moving_ccw(daq.vy >= -3.11 & daq.vyv <= 0) = 1;
    end
    diff_array = diff([0, moving_ccw, 0]);
    run_starts = find(diff_array == 1);
    run_ends = find(diff_array == -1) - 1;
    
    for i = 1:length(run_starts)
        run_length = run_ends(i) - run_starts(i) + 1;
        if run_length < remove_if_shorter_than
            moving_ccw(run_starts(i):run_ends(i)) = 0;
        end
    end


    %% now chop up with preface & plot - CLOCKWISE

    % start with clockwise motion
    % Initialize cell arrays to store segments of velocity
    dff_cw_motion = {};  
    pattern_cw_motion = {}; 
    total_speed_cw_motion ={};
    times_cw_motion ={};

    motion_on_markers =[];
    motion_off_markers =[];

    % find changes of onset of cw motion
    change_points = [1, find(diff(moving_cw) ~= 0) + 1, length(moving_cw)];

    % Loop through each segment and separate based on motion value
    % skip first and last presentation due to issues with timing
    % start at 3 bc 1 is just 1 (start of trial) and first presentation
    % doesnt have enough pre-data

    %determine how long to cut at the end
    % pi/2 = 3
    % pi = 2
    for i = 3:length(change_points) - 3
        % Get the indices for the current segment
        segment_indices = change_points(i):change_points(i+1) - 1;
    
        % Check the motion value in this segment
        if moving_cw(segment_indices(1)) > 0
            % Calculate the start index for pre-motion points (ensuring it doesn’t go below 1)
            pre_motion_point = max(1, segment_indices(1) - pre_motion_points);
            % Calculate the end index for post-motion points (ensuring it doesn’t go below 1)
            post_motion_point = min(length(moving_ccw), segment_indices(end) + post_motion_points);
            %select entire peirod
            extended_segment_indices = pre_motion_point:post_motion_point;

            % only motion on fwd and rot
            derivative_of_position = diff(daq.vy);
            dff_cw_motion{end+1} = ts{1}(extended_segment_indices);
            pattern_cw_motion{end+1} = daq.vy(extended_segment_indices);
            total_speed_cw_motion{end+1} = daq.totalspeed(extended_segment_indices);
            times_cw_motion{end+1} = daq.t(extended_segment_indices);
            
            % Record the exact point where motion switches on for plotting
            motion_on_markers(end+1) = segment_indices(1) - pre_motion_point + 1;
            motion_off_markers(end+1) = segment_indices(end)-segment_indices(1)+pre_motion_point;% Relative position within segment
        end
    end

    % Ensure all "motionon" segments are the same length by trimming to the shortest segment
    min_length = min(cellfun(@length, dff_cw_motion));
    dff_cw_motion = cellfun(@(x) x(1:min_length), dff_cw_motion, 'UniformOutput', false);
    pattern_cw_motion = cellfun(@(x) x(1:min_length), pattern_cw_motion, 'UniformOutput', false);
    total_speed_cw_motion = cellfun(@(x) x(1:min_length), total_speed_cw_motion, 'UniformOutput', false);
    times_cw_motion= cellfun(@(x) x(1:min_length), times_cw_motion, 'UniformOutput', false);
    
    % Convert to a matrix for calculating the average dff
    dff_ave = cell2mat(reshape(dff_cw_motion, length(dff_cw_motion), []));
    average_dff = mean(dff_ave, 1);


    % Plot the "motionon" segments with pre-motion points and vertical lines
    figure;
    
    % Subplot 1: Velocity
    subplot(2, 1, 1);  % Create the first subplot (2 rows, 1 column, position 1)
    hold on;
    % Plot each raw "motionon" velocity segment in lighter green
    for i = 1:length(dff_cw_motion)
        plot(daq.t(1:length(dff_cw_motion{i})), dff_cw_motion{i}, 'Color', [0.5 1 0.5], 'LineWidth', 1);  % Lighter green
        xline(daq.t(motion_on_markers(1)), 'k--', 'LineWidth', 1.5);  % Dashed black line at motion-on marker
        xline(daq.t(motion_on_markers(1))+2, 'k--', 'LineWidth', 1.5);
    end
    
    % Plot the average velocity for "motionon" in bold green
    plot(daq.t(1:length(dff_cw_motion{i})), average_dff, 'g', 'LineWidth', 3, 'DisplayName', 'Average DFF');
    
    % Customize the first subplot
    xlabel('Time (s)');
    ylabel('DFF (mm/s)');
    title('DFF');
    legend('DFF');
    hold off;
    
    % Subplot 2: Speed
    subplot(2, 1, 2);  % Create the second subplot (2 rows, 1 column, position 2)
    hold on;
    % Plot each raw "motionon" speed segment in lighter blue
    for i = 1:length(pattern_cw_motion)
        plot(daq.t(1:length(pattern_cw_motion{i})), pattern_cw_motion{i}, 'Color', [0.5 0.5 1], 'LineWidth', 1);  % Lighter blue
        xline(daq.t(motion_on_markers(1)), 'k--', 'LineWidth', 1.5);  % Dashed black line at motion-on marker
        xline(4, 'k--', 'LineWidth', 1.5);
    end

    % Customize the second subplot
    xlabel('Time (s)');
    ylabel('pattern position');
    title('pattern');
    legend('Average motion-On Angular Speed');
    hold off;
    %save_plot_with_title_as_filename('forward', 'rotation', savepath)

    %% ccw
    % start with clockwise motion
    % Initialize cell arrays to store segments of velocity
    dff_ccw_motion = {};  
    pattern_ccw_motion = {}; 
    total_speed_ccw_motion ={};
    times_ccw_motion ={};
    
    ccw_motion_on_markers =[];
    ccw_motion_off_markers =[];

    % find changes of onset of ccw motion
    change_points = [1, find(diff(moving_ccw) ~= 0) + 1, length(moving_ccw)];

    % Loop through each segment and separate based on motion value
    % skip first and last presentation due to issues with timing
    for i = 3:length(change_points) - 2
        % Get the indices for the current segment
        segment_indices = change_points(i):change_points(i+1) - 1;
    
        % Check the motion value in this segment
        if moving_ccw(segment_indices(1)) > 0
            % Calculate the start index for pre-motion points (ensuring it doesn’t go below 1)
            pre_motion_point = max(1, segment_indices(1) - pre_motion_points);
            % Calculate the end index for post-motion points (ensuring it doesn’t go below 1)
            post_motion_point = min(length(moving_ccw), segment_indices(end) + post_motion_points);

            %select entire peirod
            extended_segment_indices = pre_motion_point:post_motion_point;

            % only motion on fwd and rot
            derivative_of_position = diff(daq.vy);
            dff_ccw_motion{end+1} = ts{1}(extended_segment_indices);
            pattern_ccw_motion{end+1} = daq.vy(extended_segment_indices);
            total_speed_ccw_motion{end+1} = daq.totalspeed(extended_segment_indices);
            times_ccw_motion{end+1} = daq.t(extended_segment_indices);
            
            % Record the exact point where motion switches on for plotting
            ccw_motion_on_markers(end+1) = segment_indices(1) - pre_motion_point + 1;
            ccw_motion_off_markers(end+1) = segment_indices(end)-segment_indices(1)+pre_motion_point;% Relative position within segment
        end
    end

    % Ensure all "motionon" segments are the same length by trimming to the shortest segment
    min_length = min(cellfun(@length, dff_ccw_motion));
    dff_ccw_motion = cellfun(@(x) x(1:min_length), dff_ccw_motion, 'UniformOutput', false);
    pattern_ccw_motion = cellfun(@(x) x(1:min_length), pattern_ccw_motion, 'UniformOutput', false);
    total_speed_ccw_motion = cellfun(@(x) x(1:min_length), total_speed_ccw_motion, 'UniformOutput', false);
    times_ccw_motion= cellfun(@(x) x(1:min_length), times_ccw_motion, 'UniformOutput', false);
    
    % Convert to a matrix for calculating the average dff
    ccw_dff_ave = cell2mat(reshape(dff_ccw_motion, length(dff_ccw_motion), []));
    CCW_average_dff = mean(ccw_dff_ave, 1);


    % Plot the "motionon" segments with pre-motion points and vertical lines
    figure;
    
    % Subplot 1: Velocity
    subplot(2, 1, 1);  % Create the first subplot (2 rows, 1 column, position 1)
    hold on;
    % Plot each raw "motionon" velocity segment in lighter green
    for i = 1:length(dff_ccw_motion)
        plot(daq.t(1:length(dff_ccw_motion{i})), dff_ccw_motion{i}, 'Color', [0.5 1 0.5], 'LineWidth', 1);  % Lighter green
        xline(daq.t(ccw_motion_on_markers(1)), 'k--', 'LineWidth', 1.5);  % Dashed black line at motion-on marker
        xline(daq.t((ccw_motion_on_markers(1)))+2, 'k--', 'LineWidth', 1.5);
    end
    
    % Plot the average velocity for "motionon" in bold green
    plot(daq.t(1:length(dff_ccw_motion{i})), CCW_average_dff, 'g', 'LineWidth', 3, 'DisplayName', 'Average DFF');
    
    % Customize the first subplot
    xlabel('Time (s)');
    ylabel('DFF (mm/s)');
    title('CCW rotation');
    legend('DFF');
    hold off;
    
    % Subplot 2: Speed
    subplot(2, 1, 2);  % Create the second subplot (2 rows, 1 column, position 2)
    hold on;
    % Plot each raw "motionon" speed segment in lighter blue
    for i = 1:length(pattern_ccw_motion)
        plot(daq.t(1:length(pattern_ccw_motion{i})), pattern_ccw_motion{i}, 'Color', [0.5 0.5 1], 'LineWidth', 1);  % Lighter blue
        xline(daq.t(ccw_motion_on_markers(1)), 'k--', 'LineWidth', 1.5);  % Dashed black line at motion-on marker
        xline(daq.t((ccw_motion_on_markers(1)))+2, 'k--', 'LineWidth', 1.5);
    end

    % Customize the second subplot
    xlabel('Time (s)');
    ylabel('pattern position');
    title('pattern');
    legend('CCW Rotation');
    hold off;
    %save_plot_with_title_as_filename('forward', 'rotation', savepath)

    %% plot cw and ccw on one chart
    % Plot the "motionon" segments with pre-motion points and vertical lines
    figure;
    
    % Subplot 1: Velocity
    subplot(2, 1, 1);  % Create the first subplot (2 rows, 1 column, position 1)
    hold on;
    % Plot each raw "motionon" velocity segment in lighter green
    for i = 1:length(dff_ccw_motion)
        plot(daq.t(1:length(dff_ccw_motion{i})), dff_ccw_motion{i}, 'Color', [0.5 1 0.5], 'LineWidth', 1);  % Lighter green
        xline(daq.t(ccw_motion_on_markers(1)), 'k--', 'LineWidth', 1.5);  % Dashed black line at motion-on marker
        xline(daq.t((ccw_motion_on_markers(1)))+2, 'k--', 'LineWidth', 1.5);
    end
    
    % Plot the average velocity for "motionon" in bold green
    plot(daq.t(1:length(dff_ccw_motion{i})), CCW_average_dff, 'g', 'LineWidth', 3, 'DisplayName', 'Average DFF');
    
    % Customize the first subplot
    xlabel('Time (s)');
    ylabel('DFF');
    title('CCW rotation');
    legend('CCW DFF');
    hold off;
    
    % Subplot 2: Speed
    subplot(2, 1, 2);  % Create the second subplot (2 rows, 1 column, position 2)
    hold on;
    % Plot cw rotation
    for i = 1:length(dff_cw_motion)
        plot(daq.t(1:length(dff_cw_motion{i})), dff_cw_motion{i}, 'Color', [0.5 0.5 1], 'LineWidth', 1);  % Lighter blue
        xline(daq.t(motion_on_markers(1)), 'k--', 'LineWidth', 1.5);  % Dashed black line at motion-on marker
        xline(daq.t((motion_on_markers(1)))+2, 'k--', 'LineWidth', 1.5);
    end

    % Plot the average velocity for cw in blue
    plot(daq.t(1:length(dff_cw_motion{i})), average_dff, 'b', 'LineWidth', 3, 'DisplayName', 'Average DFF');
    

    % Customize the second subplot
    xlabel('Time (s)');
    ylabel('DFF');
    title('CW rotation');
    legend('CW Rotation');
    hold off;
    save_plot_with_title_as_filename('cw', 'ccw', savepath)

    %% now both on one chart
    figure
    hold on;
    
    % Plot each raw "motionon" velocity segment in lighter green
    h1 = [];  % To store handle for legend
    for i = 1:length(dff_ccw_motion)
        h = plot(daq.t(1:length(dff_ccw_motion{i})), dff_ccw_motion{i}, 'Color', [0.5 1 0.5], 'LineWidth', 1);
        if i == 1  % Only keep first handle for legend
            h1 = h;
        end
    end
    
    % Plot each raw "motionon" velocity segment in lighter blue
    h2 = [];  % To store handle for legend
    for i = 1:length(dff_cw_motion)
        h = plot(daq.t(1:length(dff_cw_motion{i})), dff_cw_motion{i}, 'Color', [0.5 0.5 1], 'LineWidth', 1);
        if i == 1  % Only keep first handle for legend
            h2 = h;
        end
    end
    
    bidirectional_dff = (average_dff+CCW_average_dff(1:length(average_dff)))/2;
    h3 = plot(daq.t(1:length(dff_cw_motion{i})), bidirectional_dff, 'm', 'LineWidth', 3);
    
    % Create legend with specific handles and labels
    legend([h1, h2, h3], {'CCW', 'CW', 'Average'}, 'Location', 'best');
    
    xline(daq.t(ccw_motion_on_markers(1)), 'k--', 'LineWidth', 1.5);
    xline(daq.t((ccw_motion_on_markers(1)))+2, 'k--', 'LineWidth', 1.5);
    
    % Customize the plot
    xlabel('Time (s)');
    ylabel('DFF');
    title('Bi-Directional Visual Rotation');
    save_plot_with_title_as_filename('cw', 'ccw_samechart', savepath)


    %% now separate walking vs not

    % first merge cw and ccw
    dff= [dff_cw_motion, dff_ccw_motion];
    speed= [total_speed_cw_motion, total_speed_ccw_motion];
    still = {}; 
    moving={};
    ave_still = {}; 
    ave_moving ={};
    
    for i = 1:length(dff)
        pre_speed = mean(speed{i}(pre_motion_points:length(speed{i})-post_motion_points));
        if pre_speed <still_cutoff
            disp("Still")
            still{end+1} = dff{i};
            ave_still{end+1} = dff{i};  
        else
            moving{end+1} = dff{i};
            ave_moving{end+1} = dff{i};
            disp("moving")
        end
    end

    % take average fwd
    % Convert to a matrix for calculating the average
    moving_ave = cell2mat(reshape(ave_moving, length(ave_moving), []));
    moving_ave = mean(moving_ave, 1);
    % Convert to a matrix for calculating the average
    still_ave = cell2mat(reshape(ave_still, length(ave_still), []));
    still_ave = mean(still_ave, 1);


    %% plot this rotation
     % Plot the "optoon" segments with pre-opto points and vertical lines
    figure;
    
    % Subplot 1: moving
    subplot(2, 1, 1);  % Create the first subplot (2 rows, 1 column, position 1)
    hold on;
    % Plot each raw "optoon" velocity segment in lighter green
    for i = 1:length(moving)
        plot(daq.t(1:length(moving{i})), moving{i}, 'Color', [0.75, 0, 0.75], 'LineWidth', 1);  % Lighter green
    end
    xline(daq.t(ccw_motion_on_markers(1)), 'k--', 'LineWidth', 1.5);
    xline(daq.t((ccw_motion_on_markers(1)))+2, 'k--', 'LineWidth', 1.5);

    % Plot the average velocity for "optoon" in bold green
    plot(daq.t(1:length(moving_ave)), moving_ave, 'Color', [1 0 1], 'LineWidth', 3, 'DisplayName', 'Average Opto-On Velocity');
    
    
    % Customize the first subplot
    xlabel('Time (s)');
    ylabel('Moving DFF during rotation');
    title('Moving during visual panel motion');
    hold off;
    
    % Subplot 2: Speed
    subplot(2, 1, 2);  % Create the second subplot (2 rows, 1 column, position 2)
    hold on;
    % Plot each raw "optoon" speed segment in lighter blue
    for i = 1:length(still)
        plot(daq.t(1:length(still{i})), still{i}, 'Color', [1 0.5 0.5], 'LineWidth', 1);  % Lighter blue
    end
    % Plot the average velocity for "optoon" in bold green
    plot(daq.t(1:length(still_ave)), still_ave, 'r', 'LineWidth', 3, 'DisplayName', 'Average Opto-On Velocity');
   
    xline(daq.t(ccw_motion_on_markers(1)), 'k--', 'LineWidth', 1.5);
    xline(daq.t((ccw_motion_on_markers(1)))+2, 'k--', 'LineWidth', 1.5);
    % Customize the second subplot
    xlabel('Time (s)');
    ylabel(sprintf('DFF still (still = total_vel<%.2f)', still_cutoff));
    title('Still during visual panel motion');
    hold off;
    save_plot_with_title_as_filename('dff_moving', 'dff_still', savepath)

end